use crate::{annotated_tuple_type, map_type, typing, List, Map, Signature, String, Type, UInt32};

#[derive(Clone, Default, PartialEq, Eq, Debug, serde::Serialize, serde::Deserialize)]
pub struct Object {
    meta_object: MetaObject,
    service_id: UInt32,
    object_id: UInt32,
    #[serde(with = "sha1")]
    object_uid: [UInt32; 5], // SHA-1 digest
}

impl std::fmt::Display for Object {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let [h0, h1, h2, h3, h4] = &self.object_uid;
        write!(f, "object(uid={h0:x}-{h1:x}-{h2:x}-{h3:x}-{h4:x})",)
    }
}

mod sha1 {
    // SHA-1 parts are always serialized as big endian.
    pub fn serialize<S>(digest: &[u32; 5], serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let mut tuple = serializer.serialize_tuple(20)?;
        use serde::ser::SerializeTuple;
        for dword in digest {
            for byte in dword.to_be_bytes() {
                tuple.serialize_element(&byte)?;
            }
        }
        tuple.end()
    }

    pub fn deserialize<'de, D>(deserializer: D) -> Result<[u32; 5], D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        use serde::Deserialize;
        let buf = <[u8; 20]>::deserialize(deserializer)?;
        let mut digest = [0u32; 5];
        for (index, dword) in digest.iter_mut().enumerate() {
            let offset = index * 4;
            *dword = u32::from_be_bytes([
                buf[offset],
                buf[offset + 1],
                buf[offset + 2],
                buf[offset + 3],
            ]);
        }
        Ok(digest)
    }
}

#[derive(Clone, Default, PartialEq, Eq, Debug, serde::Serialize, serde::Deserialize)]
pub struct MetaObject {
    methods: Map<UInt32, MetaMethod>,
    signals: Map<UInt32, MetaSignal>,
    properties: Map<UInt32, MetaProperty>,
    description: String,
}

impl MetaObject {
    pub fn get_type() -> Type {
        annotated_tuple_type! {
            "MetaObject" => {
                "methods" => map_type! {
                    Type::UInt32 => MetaMethod::get_type()
                },
                "signals" => map_type! {
                    Type::UInt32 => MetaSignal::get_type()
                },
                "properties" => map_type! {
                    Type::UInt32 => MetaProperty::get_type()
                },
                "description" => Type::String,
            }
        }
    }
}

#[derive(
    Clone,
    Default,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize,
)]
pub struct MetaMethod {
    uid: UInt32,
    return_signature: Signature,
    name: String,
    parameters_signature: Signature,
    description: String,
    parameters: List<MetaMethodParameter>,
    return_description: String,
}

impl MetaMethod {
    pub fn get_type() -> Type {
        annotated_tuple_type! {
            "MetaMethod" => {
                "uid" => Type::UInt32,
                "returnSignature" => Type::String,
                "name" => Type::String,
                "parametersSignature" => Type::String,
                "description" => Type::String,
                "parameters" => typing::list(MetaMethodParameter::get_type()),
                "returnDescription" => Type::String,
            }
        }
    }
}

#[derive(
    Clone,
    Default,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize,
)]
pub struct MetaMethodParameter {
    name: String,
    description: String,
}

impl MetaMethodParameter {
    pub fn get_type() -> Type {
        annotated_tuple_type! {
            "MetaMethodParameter" => {
                "name" => Type::String,
                "description" => Type::String,
            }
        }
    }
}

#[derive(
    Clone,
    Default,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize,
)]
pub struct MetaSignal {
    uid: u32,
    name: String,
    signature: Signature,
}

impl MetaSignal {
    pub fn get_type() -> Type {
        annotated_tuple_type! {
            "MetaSignal" => {
                "uid" => Type::UInt32,
                "name" => Type::String,
                "signature" => Type::String,
            }
        }
    }
}

#[derive(
    Clone,
    Default,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize,
)]
pub struct MetaProperty {
    uid: u32,
    name: String,
    signature: Signature,
}

impl MetaProperty {
    pub fn get_type() -> Type {
        annotated_tuple_type! {
            "MetaProperty" => {
                "uid" => Type::UInt32,
                "name" => Type::String,
                "signature" => Type::String,
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{map, tuple_type};
    use pretty_assertions::assert_eq;

    #[test]
    fn test_object_to_from_bytes() {
        use crate::{from_bytes, to_bytes};

        // An Object taken from a TCP dump of libqi tests.
        let bytes_in = vec![
            0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x4c, 0x0d, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
            0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c,
            0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0f, 0x00,
            0x00, 0x00, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76,
            0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c, 0x29, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x28, 0x7b, 0x49, 0x28, 0x49, 0x73,
            0x73, 0x73, 0x73, 0x5b, 0x28, 0x73, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x4d,
            0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
            0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
            0x69, 0x6f, 0x6e, 0x3e, 0x5d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65,
            0x74, 0x68, 0x6f, 0x64, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x74, 0x75, 0x72,
            0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6e, 0x61, 0x6d,
            0x65, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x69,
            0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
            0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
            0x72, 0x73, 0x2c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
            0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x7d, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73,
            0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2c, 0x75,
            0x69, 0x64, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
            0x75, 0x72, 0x65, 0x3e, 0x7d, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73, 0x29, 0x3c, 0x4d,
            0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2c, 0x75, 0x69,
            0x64, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
            0x72, 0x65, 0x3e, 0x7d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a,
            0x65, 0x63, 0x74, 0x2c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2c, 0x73, 0x69,
            0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
            0x65, 0x73, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
            0x3e, 0x0a, 0x00, 0x00, 0x00, 0x6d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
            0x74, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x76, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x72, 0x6d, 0x69,
            0x6e, 0x61, 0x74, 0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6d, 0x08, 0x00, 0x00, 0x00, 0x70, 0x72,
            0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x03, 0x00, 0x00, 0x00, 0x28, 0x6d, 0x29, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
            0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0b, 0x00, 0x00, 0x00,
            0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x04, 0x00, 0x00,
            0x00, 0x28, 0x6d, 0x6d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
            0x00, 0x5b, 0x73, 0x5d, 0x0a, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
            0x74, 0x69, 0x65, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x1a, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67,
            0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
            0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x06, 0x00, 0x00, 0x00, 0x28,
            0x49, 0x49, 0x4c, 0x73, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x62, 0x0e, 0x00, 0x00, 0x00, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
            0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
            0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0b, 0x00, 0x00, 0x00, 0x65,
            0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x03, 0x00, 0x00, 0x00,
            0x28, 0x62, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x7b,
            0x49, 0x28, 0x49, 0x28, 0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
            0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c,
            0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c,
            0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x28, 0x66, 0x66, 0x66,
            0x29, 0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69,
            0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
            0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
            0x75, 0x65, 0x3e, 0x28, 0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
            0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c,
            0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c,
            0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x29, 0x3c, 0x4d, 0x65,
            0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
            0x2c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x77, 0x61, 0x6c, 0x6c, 0x2c, 0x75, 0x73,
            0x65, 0x72, 0x2c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3e, 0x7d, 0x05, 0x00, 0x00,
            0x00, 0x73, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00,
            0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0a, 0x00, 0x00, 0x00, 0x63,
            0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28,
            0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54,
            0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x0e, 0x00,
            0x00, 0x00, 0x69, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
            0x65, 0x64, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x76, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x61, 0x62, 0x6c,
            0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x62, 0x29, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
            0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x06, 0x00, 0x00, 0x00,
            0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x6f, 0x29, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00,
            0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x73, 0x04, 0x00, 0x00, 0x00,
            0x70, 0x69, 0x6e, 0x67, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x66, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x06, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d,
            0x65, 0x4d, 0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x73, 0x29, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x00,
            0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x63,
            0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x8b, 0x00, 0x00, 0x00, 0x28, 0x28, 0x49,
            0x69, 0x49, 0x6d, 0x28, 0x6c, 0x6c, 0x29, 0x3c, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61,
            0x6c, 0x2c, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x2c, 0x74, 0x76, 0x5f, 0x75, 0x73,
            0x65, 0x63, 0x3e, 0x6c, 0x6c, 0x49, 0x49, 0x29, 0x3c, 0x45, 0x76, 0x65, 0x6e, 0x74,
            0x54, 0x72, 0x61, 0x63, 0x65, 0x2c, 0x69, 0x64, 0x2c, 0x6b, 0x69, 0x6e, 0x64, 0x2c,
            0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x2c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
            0x74, 0x73, 0x2c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2c, 0x75,
            0x73, 0x65, 0x72, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x79, 0x73, 0x74,
            0x65, 0x6d, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x63, 0x61, 0x6c, 0x6c, 0x65,
            0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x63, 0x61, 0x6c, 0x6c, 0x65,
            0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3e, 0x29, 0x67, 0x00, 0x00, 0x00,
            0x67, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x03, 0x00,
            0x00, 0x00, 0x28, 0x73, 0x29, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x67,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x00, 0x00,
            0x00, 0x73, 0x00, 0x00, 0x00, 0x00, // metaobject
            0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0xf8, 0xf7, 0x86, 0x6b, 0x07,
            0x04, 0x05, 0xd6, 0x3f, 0xe4, 0x39, 0xf9, 0x47, 0x7e, 0x96, 0xfc, 0x2f, 0x2c, 0x3d,
        ];

        let object: Object = from_bytes(&bytes_in).unwrap();

        assert_eq!(
            object,
            Object {
                meta_object: MetaObject {
                    methods: map![
                        0 => MetaMethod {
                            uid: 0,
                            return_signature: Signature::new(Type::UInt64),
                            name: String::from("registerEvent"),
                            parameters_signature: Signature::new(tuple_type![
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                            ]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        1 => MetaMethod {
                            uid: 1,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("unregisterEvent"),
                            parameters_signature: Signature::new(tuple_type![
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                            ]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        2 => MetaMethod {
                            uid: 2,
                            return_signature: Signature::new(MetaObject::get_type()),
                            name: String::from("metaObject"),
                            parameters_signature: Signature::new(tuple_type![Type::UInt32]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        3 => MetaMethod {
                            uid: 3,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("terminate"),
                            parameters_signature: Signature::new(tuple_type![Type::UInt32]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        5 => MetaMethod {
                            uid: 5,
                            return_signature: Signature::new(Type::Dynamic),
                            name: String::from("property"),
                            parameters_signature: Signature::new(tuple_type![Type::Dynamic]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        6 => MetaMethod {
                            uid: 6,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("setProperty"),
                            parameters_signature: Signature::new(tuple_type![
                                Type::Dynamic,
                                Type::Dynamic
                            ]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        7 => MetaMethod {
                            uid: 7,
                            return_signature: Signature::new(typing::list(Type::String)),
                            name: String::from("properties"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        8 =>
                        MetaMethod {
                            uid: 8,
                            return_signature: Signature::new(Type::UInt64),
                            name: String::from("registerEventWithSignature"),
                            parameters_signature: Signature::new(tuple_type![
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                                Type::String
                            ]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        80 => MetaMethod {
                            uid: 80,
                            return_signature: Signature::new(Type::Bool),
                            name: String::from("isStatsEnabled"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        81 => MetaMethod {
                            uid: 81,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("enableStats"),
                            parameters_signature: Signature::new(tuple_type![Type::Bool]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        82 => MetaMethod {
                            uid: 82,
                            return_signature: Signature::new({
                                let minmaxsum = annotated_tuple_type! {
                                    "MinMaxSum" => {
                                        "minValue" => Type::Float32,
                                        "maxValue" => Type::Float32,
                                        "cumulatedValue" => Type::Float32,
                                    }
                                };
                                map_type! {
                                    Type::UInt32 => annotated_tuple_type! {
                                        "MethodStatistics" => {
                                            "count" => Type::UInt32,
                                            "wall" => minmaxsum.clone(),
                                            "user" => minmaxsum.clone(),
                                            "system" => minmaxsum,
                                        }
                                    }
                                }
                            }),
                            name: String::from("stats"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        83 => MetaMethod {
                            uid: 83,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("clearStats"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        84 => MetaMethod {
                            uid: 84,
                            return_signature: Signature::new(Type::Bool),
                            name: String::from("isTraceEnabled"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        85 => MetaMethod {
                            uid: 85,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("enableTrace"),
                            parameters_signature: Signature::new(tuple_type![Type::Bool]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        100 => MetaMethod {
                            uid: 100,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("pingMe"),
                            parameters_signature: Signature::new(tuple_type![Type::Object]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        101 => MetaMethod {
                            uid: 101,
                            return_signature: Signature::new(Type::String),
                            name: String::from("ping"),
                            parameters_signature: Signature::new(tuple_type![]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                        102 => MetaMethod {
                            uid: 102,
                            return_signature: Signature::new(Type::Unit),
                            name: String::from("nameMe"),
                            parameters_signature: Signature::new(tuple_type![Type::String]),
                            description: String::new(),
                            parameters: list![],
                            return_description: String::new(),
                        },
                    ],
                    signals: map! {
                        86 => MetaSignal {
                            uid: 86,
                            name: String::from("traceObject"),
                            signature: Signature::new(tuple_type![annotated_tuple_type! {
                                "EventTrace" => {
                                    "id" => Type::UInt32,
                                    "kind" => Type::Int32,
                                    "slotId" => Type::UInt32,
                                    "arguments" => Type::Dynamic,
                                    "timestamp" => annotated_tuple_type! {
                                        "timeval" => {
                                            "tv_sec" => Type::Int64,
                                            "tv_usec" => Type::Int64,
                                        }
                                    },
                                    "userUsTime" => Type::Int64,
                                    "systemUsTime" => Type::Int64,
                                    "callerContext" => Type::UInt32,
                                    "calleeContext" => Type::UInt32,
                                }
                            }]),
                        },
                        103 => MetaSignal {
                            uid: 103,
                            name: String::from("name"),
                            signature: Signature::new(tuple_type![Type::String]),
                        },
                    },
                    properties: map! {
                        103 => MetaProperty {
                            uid: 103,
                            name: String::from("name"),
                            signature: Signature::new(Type::String),
                        },
                    },
                    description: String::new(),
                },
                service_id: 2,
                object_id: 4,
                object_uid: [0x0bf8f786, 0x6b070405, 0xd63fe439, 0xf9477e96, 0xfc2f2c3d],
            }
        );
        let bytes_out = to_bytes(&object).unwrap();
        assert_eq!(bytes_in.as_slice(), &bytes_out);
    }
}
