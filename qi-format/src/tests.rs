use super::*;
use bytes::Bytes;
use pretty_assertions::assert_eq;
use qi_value::{
    object::{MetaMethod, MetaObject, MetaProperty, MetaSignal, Object, ObjectUid},
    ty, ActionId, Dynamic, Map, ObjectId, Reflect, ServiceId, Signature, Type,
};
use std::collections::BTreeMap;

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct S0 {
    u: (),
    t: (i8, u8, i16, u16, i32, u32, i64, u64, f32, f64),
    #[serde(with = "serde_bytes")]
    r: Vec<u8>,
    o: std::option::Option<bool>,
    s: S1,
    l: Vec<std::string::String>,
    m: BTreeMap<i32, std::string::String>,
}

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct S1(std::string::String, std::string::String);

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct Serializable(S0);

#[test]
fn test_to_from_value_serializable() {
    let sample_in = Serializable(S0 {
        u: (),
        t: (-8, 8, -16, 16, -32, 32, -64, 64, 32.32, 64.64),
        r: vec![51, 52, 53, 54],
        o: Some(false),
        s: S1("bananas".to_string(), "oranges".to_string()),
        l: vec!["cookies".to_string(), "muffins".to_string()],
        m: {
            let mut m = BTreeMap::new();
            m.insert(1, "hello".to_string());
            m.insert(2, "world".to_string());
            m
        },
    });
    let expected_value = Bytes::from_static(&[
        0xf8, 0x08, 0xf0, 0xff, 0x10, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0xc0,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xae, 0x47, 0x01, 0x42, 0x29, 0x5c, 0x8f, 0xc2, 0xf5, 0x28, 0x50, 0x40, // t
        4, 0, 0, 0, 51, 52, 53, 54, // r
        1, 0, // o
        7, 0, 0, 0, b'b', b'a', b'n', b'a', b'n', b'a', b's', 7, 0, 0, 0, b'o', b'r', b'a', b'n',
        b'g', b'e', b's', // s
        2, 0, 0, 0, 7, 0, 0, 0, b'c', b'o', b'o', b'k', b'i', b'e', b's', 7, 0, 0, 0, b'm', b'u',
        b'f', b'f', b'i', b'n', b's', // l
        2, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, b'h', b'e', b'l', b'l', b'o', 2, 0, 0, 0, 5, 0, 0, 0,
        b'w', b'o', b'r', b'l', b'd', // m
    ]);
    let actual_value = to_bytes(&sample_in).unwrap();
    assert_eq!(actual_value, expected_value);
    let sample_out: Serializable = from_bytes(&actual_value).unwrap();
    assert_eq!(sample_in, sample_out);
}

#[test]
fn test_dynamic_to_from_value() {
    let value_in = Bytes::from_static(&[
        0x01, 0x00, 0x00, 0x00, 0x73, 0x1a, 0x00, 0x00, 0x00, 0x54, 0x68, 0x65, 0x20, 0x72, 0x6f,
        0x62, 0x6f, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x69, 0x7a, 0x65, 0x64,
    ]);
    let dynamic: Dynamic<&str> = from_bytes(&value_in).unwrap();
    assert_eq!(dynamic, Dynamic("The robot is not localized"));
    let value_out = to_bytes(&dynamic).unwrap();
    assert_eq!(value_in, value_out);
}

#[test]
fn test_object_to_from_value() {
    // An Object taken from a TCP dump of libqi tests.
    let value_in = Bytes::from_static(&[
        0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x4c, 0x0d, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
        0x76, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c, 0x29, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0f, 0x00, 0x00, 0x00, 0x75, 0x6e, 0x72,
        0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00,
        0x00, 0x28, 0x49, 0x49, 0x4c, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00,
        0x28, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73, 0x73, 0x73, 0x5b, 0x28, 0x73, 0x73, 0x29, 0x3c,
        0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
        0x65, 0x74, 0x65, 0x72, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72,
        0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x5d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61,
        0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x74, 0x75,
        0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6e, 0x61, 0x6d,
        0x65, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x69, 0x67,
        0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
        0x69, 0x6f, 0x6e, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2c,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
        0x6f, 0x6e, 0x3e, 0x7d, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74,
        0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x6e, 0x61, 0x6d,
        0x65, 0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x7d, 0x7b, 0x49,
        0x28, 0x49, 0x73, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65,
        0x72, 0x74, 0x79, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x69,
        0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x7d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74,
        0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
        0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
        0x74, 0x69, 0x65, 0x73, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
        0x6e, 0x3e, 0x0a, 0x00, 0x00, 0x00, 0x6d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
        0x74, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x76, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
        0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x6d, 0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
        0x03, 0x00, 0x00, 0x00, 0x28, 0x6d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x76, 0x0b, 0x00, 0x00, 0x00, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
        0x74, 0x79, 0x04, 0x00, 0x00, 0x00, 0x28, 0x6d, 0x6d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x5b, 0x73, 0x5d, 0x0a, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x70,
        0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x1a, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67, 0x69,
        0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69,
        0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x06, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c,
        0x73, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x0e, 0x00, 0x00,
        0x00, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
        0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x76, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
        0x73, 0x03, 0x00, 0x00, 0x00, 0x28, 0x62, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0xc2, 0x00,
        0x00, 0x00, 0x7b, 0x49, 0x28, 0x49, 0x28, 0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e,
        0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
        0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c,
        0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x28, 0x66, 0x66, 0x66, 0x29,
        0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56,
        0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63,
        0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x28,
        0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c,
        0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
        0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
        0x75, 0x65, 0x3e, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
        0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x77, 0x61,
        0x6c, 0x6c, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3e,
        0x7d, 0x05, 0x00, 0x00, 0x00, 0x73, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
        0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0a, 0x00, 0x00, 0x00,
        0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00,
        0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x0e, 0x00, 0x00, 0x00,
        0x69, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x02,
        0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76,
        0x0b, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
        0x03, 0x00, 0x00, 0x00, 0x28, 0x62, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x76, 0x06, 0x00, 0x00, 0x00, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x03, 0x00, 0x00,
        0x00, 0x28, 0x6f, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x65, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x73, 0x04,
        0x00, 0x00, 0x00, 0x70, 0x69, 0x6e, 0x67, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x66,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x06, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d,
        0x65, 0x4d, 0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x73, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00,
        0x56, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x8b, 0x00, 0x00, 0x00, 0x28, 0x28, 0x49, 0x69, 0x49, 0x6d, 0x28,
        0x6c, 0x6c, 0x29, 0x3c, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x2c, 0x74, 0x76, 0x5f,
        0x73, 0x65, 0x63, 0x2c, 0x74, 0x76, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x3e, 0x6c, 0x6c, 0x49,
        0x49, 0x29, 0x3c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2c, 0x69,
        0x64, 0x2c, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x2c, 0x61,
        0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
        0x61, 0x6d, 0x70, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c,
        0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x63, 0x61,
        0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x63, 0x61, 0x6c,
        0x6c, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3e, 0x29, 0x67, 0x00, 0x00,
        0x00, 0x67, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x03, 0x00,
        0x00, 0x00, 0x28, 0x73, 0x29, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x67, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x00, 0x00, 0x00, 0x73,
        0x00, 0x00, 0x00, 0x00, // metaobject
        0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0xf8, 0xf7, 0x86, 0x6b, 0x07, 0x04,
        0x05, 0xd6, 0x3f, 0xe4, 0x39, 0xf9, 0x47, 0x7e, 0x96, 0xfc, 0x2f, 0x2c, 0x3d,
    ]);

    let object_in: Object = from_bytes(&value_in).unwrap();

    assert_eq!(
        object_in,
        Object {
            meta_object: MetaObject {
                methods: Map::from_iter([
                    (
                        ActionId(0),
                        MetaMethod {
                            uid: ActionId(0),
                            return_signature: Signature::new(Some(Type::UInt64)),
                            name: String::from("registerEvent"),
                            parameters_signature: Signature::new(Some(ty::tuple([
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                            ]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(1),
                        MetaMethod {
                            uid: ActionId(1),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("unregisterEvent"),
                            parameters_signature: Signature::new(Some(ty::tuple([
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                            ]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(2),
                        MetaMethod {
                            uid: ActionId(2),
                            return_signature: Signature::new(MetaObject::ty()),
                            name: String::from("metaObject"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::UInt32]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(3),
                        MetaMethod {
                            uid: ActionId(3),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("terminate"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::UInt32]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(5),
                        MetaMethod {
                            uid: ActionId(5),
                            return_signature: Signature::dynamic(),
                            name: String::from("property"),
                            parameters_signature: Signature::new(Some(ty::tuple([None]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(6),
                        MetaMethod {
                            uid: ActionId(6),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("setProperty"),
                            parameters_signature: Signature::new(Some(ty::tuple([None, None]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(7),
                        MetaMethod {
                            uid: ActionId(7),
                            return_signature: Signature::new(Some(ty::list(Type::String))),
                            name: String::from("properties"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(8),
                        MetaMethod {
                            uid: ActionId(8),
                            return_signature: Signature::new(Some(Type::UInt64)),
                            name: String::from("registerEventWithSignature"),
                            parameters_signature: Signature::new(Some(ty::tuple([
                                Type::UInt32,
                                Type::UInt32,
                                Type::UInt64,
                                Type::String,
                            ]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(80),
                        MetaMethod {
                            uid: ActionId(80),
                            return_signature: Signature::new(Some(Type::Bool)),
                            name: String::from("isStatsEnabled"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(81),
                        MetaMethod {
                            uid: ActionId(81),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("enableStats"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::Bool]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(82),
                        MetaMethod {
                            uid: ActionId(82),
                            return_signature: Signature::new(Some({
                                let minmaxsum = ty::struct_ty(
                                    "MinMaxSum",
                                    [
                                        ("minValue", Type::Float32),
                                        ("maxValue", Type::Float32),
                                        ("cumulatedValue", Type::Float32),
                                    ],
                                );
                                ty::map(
                                    Type::UInt32,
                                    ty::struct_ty(
                                        "MethodStatistics",
                                        [
                                            ("count", Type::UInt32),
                                            ("wall", minmaxsum.clone()),
                                            ("user", minmaxsum.clone()),
                                            ("system", minmaxsum),
                                        ],
                                    ),
                                )
                            })),
                            name: String::from("stats"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(83),
                        MetaMethod {
                            uid: ActionId(83),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("clearStats"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(84),
                        MetaMethod {
                            uid: ActionId(84),
                            return_signature: Signature::new(Some(Type::Bool)),
                            name: String::from("isTraceEnabled"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(85),
                        MetaMethod {
                            uid: ActionId(85),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("enableTrace"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::Bool]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(100),
                        MetaMethod {
                            uid: ActionId(100),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("pingMe"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::Object]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(101),
                        MetaMethod {
                            uid: ActionId(101),
                            return_signature: Signature::new(Some(Type::String)),
                            name: String::from("ping"),
                            parameters_signature: Signature::new(Some(ty::unit_tuple())),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                    (
                        ActionId(102),
                        MetaMethod {
                            uid: ActionId(102),
                            return_signature: Signature::new(Some(Type::Unit)),
                            name: String::from("nameMe"),
                            parameters_signature: Signature::new(Some(ty::tuple([Type::String]))),
                            description: String::new(),
                            parameters: vec![],
                            return_description: String::new(),
                        },
                    ),
                ]),
                signals: Map::from_iter([
                    (
                        ActionId(86),
                        MetaSignal {
                            uid: ActionId(86),
                            name: String::from("traceObject"),
                            signature: Signature::new(Some(ty::tuple([ty::struct_ty(
                                "EventTrace",
                                [
                                    ("id", Some(Type::UInt32)),
                                    ("kind", Some(Type::Int32)),
                                    ("slotId", Some(Type::UInt32)),
                                    ("arguments", None),
                                    (
                                        "timestamp",
                                        Some(ty::struct_ty(
                                            "timeval",
                                            [("tv_sec", Type::Int64), ("tv_usec", Type::Int64)],
                                        )),
                                    ),
                                    ("userUsTime", Some(Type::Int64)),
                                    ("systemUsTime", Some(Type::Int64)),
                                    ("callerContext", Some(Type::UInt32)),
                                    ("calleeContext", Some(Type::UInt32)),
                                ],
                            )]))),
                        },
                    ),
                    (
                        ActionId(103),
                        MetaSignal {
                            uid: ActionId(103),
                            name: String::from("name"),
                            signature: Signature::new(Some(ty::tuple([Type::String]))),
                        },
                    ),
                ]),
                properties: Map::from_iter([(
                    ActionId(103),
                    MetaProperty {
                        uid: ActionId(103),
                        name: String::from("name"),
                        signature: Signature::new(Some(Type::String)),
                    },
                )]),
                description: String::new(),
            },
            service_id: ServiceId(2),
            object_id: ObjectId(4),
            object_uid: ObjectUid::from_digest([
                0x0bf8f786, 0x6b070405, 0xd63fe439, 0xf9477e96, 0xfc2f2c3d,
            ]),
        }
    );
    let object_out = from_bytes(&to_bytes(&object_in).unwrap()).unwrap();
    assert_eq!(object_in, object_out);
}
