use super::*;
use pretty_assertions::assert_eq;
use std::collections::BTreeMap;

#[test]
fn test_metaobject_to_from_bytes() {
    // A MetaObject taken from a TCP dump of libqi tests.
    let _bytes = vec![
        0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x4c, 0x0d, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
        0x76, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c, 0x29, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0f, 0x00, 0x00, 0x00, 0x75, 0x6e, 0x72,
        0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00,
        0x00, 0x28, 0x49, 0x49, 0x4c, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00,
        0x28, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73, 0x73, 0x73, 0x5b, 0x28, 0x73, 0x73, 0x29, 0x3c,
        0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
        0x65, 0x74, 0x65, 0x72, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72,
        0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x5d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61,
        0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x74, 0x75,
        0x72, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6e, 0x61, 0x6d,
        0x65, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x69, 0x67,
        0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
        0x69, 0x6f, 0x6e, 0x2c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2c,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
        0x6f, 0x6e, 0x3e, 0x7d, 0x7b, 0x49, 0x28, 0x49, 0x73, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74,
        0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x6e, 0x61, 0x6d,
        0x65, 0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x7d, 0x7b, 0x49,
        0x28, 0x49, 0x73, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65,
        0x72, 0x74, 0x79, 0x2c, 0x75, 0x69, 0x64, 0x2c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x69,
        0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x7d, 0x73, 0x29, 0x3c, 0x4d, 0x65, 0x74,
        0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
        0x2c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
        0x74, 0x69, 0x65, 0x73, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
        0x6e, 0x3e, 0x0a, 0x00, 0x00, 0x00, 0x6d, 0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
        0x74, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x76, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
        0x65, 0x03, 0x00, 0x00, 0x00, 0x28, 0x49, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x6d, 0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
        0x03, 0x00, 0x00, 0x00, 0x28, 0x6d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x76, 0x0b, 0x00, 0x00, 0x00, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
        0x74, 0x79, 0x04, 0x00, 0x00, 0x00, 0x28, 0x6d, 0x6d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x5b, 0x73, 0x5d, 0x0a, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x70,
        0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x1a, 0x00, 0x00, 0x00, 0x72, 0x65, 0x67, 0x69,
        0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69,
        0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x06, 0x00, 0x00, 0x00, 0x28, 0x49, 0x49, 0x4c,
        0x73, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x0e, 0x00, 0x00,
        0x00, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
        0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x76, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
        0x73, 0x03, 0x00, 0x00, 0x00, 0x28, 0x62, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0xc2, 0x00,
        0x00, 0x00, 0x7b, 0x49, 0x28, 0x49, 0x28, 0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e,
        0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
        0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c,
        0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x28, 0x66, 0x66, 0x66, 0x29,
        0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c, 0x6d, 0x69, 0x6e, 0x56,
        0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x63,
        0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x28,
        0x66, 0x66, 0x66, 0x29, 0x3c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x2c,
        0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
        0x75, 0x65, 0x2c, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
        0x75, 0x65, 0x3e, 0x29, 0x3c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
        0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x77, 0x61,
        0x6c, 0x6c, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3e,
        0x7d, 0x05, 0x00, 0x00, 0x00, 0x73, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
        0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x0a, 0x00, 0x00, 0x00,
        0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x02, 0x00, 0x00, 0x00, 0x28,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00,
        0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x0e, 0x00, 0x00, 0x00,
        0x69, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x02,
        0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76,
        0x0b, 0x00, 0x00, 0x00, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
        0x03, 0x00, 0x00, 0x00, 0x28, 0x62, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x76, 0x03, 0x00, 0x00, 0x00, 0x73, 0x65, 0x74, 0x03, 0x00, 0x00, 0x00, 0x28, 0x6f,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00,
        0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x00, 0x00,
        0x67, 0x65, 0x74, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x6f, 0x10, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65,
        0x4d, 0x61, 0x64, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00,
        0x00, 0x67, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x11, 0x00, 0x00, 0x00, 0x65,
        0x6d, 0x69, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
        0x79, 0x02, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00,
        0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
        0x74, 0x8b, 0x00, 0x00, 0x00, 0x28, 0x28, 0x49, 0x69, 0x49, 0x6d, 0x28, 0x6c, 0x6c, 0x29,
        0x3c, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x2c, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x63,
        0x2c, 0x74, 0x76, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x3e, 0x6c, 0x6c, 0x49, 0x49, 0x29, 0x3c,
        0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2c, 0x69, 0x64, 0x2c, 0x6b,
        0x69, 0x6e, 0x64, 0x2c, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x2c, 0x61, 0x72, 0x67, 0x75,
        0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
        0x2c, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x79, 0x73,
        0x74, 0x65, 0x6d, 0x55, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x63, 0x61, 0x6c, 0x6c, 0x65,
        0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65,
        0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3e, 0x29, 0x68, 0x00, 0x00, 0x00, 0x68, 0x00,
        0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70,
        0x65, 0x72, 0x74, 0x79, 0x03, 0x00, 0x00, 0x00, 0x28, 0x6f, 0x29, 0x01, 0x00, 0x00, 0x00,
        0x68, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x68, 0x75, 0x6d,
        0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x01, 0x00, 0x00, 0x00, 0x6f,
        0x00, 0x00, 0x00, 0x00,
    ];
}

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct S0 {
    u: (),
    t: (i8, u8, i16, u16, i32, u32, i64, u64, f32, f64),
    #[serde(with = "serde_bytes")]
    r: Vec<u8>,
    o: std::option::Option<bool>,
    s: S1,
    l: Vec<std::string::String>,
    m: BTreeMap<i32, std::string::String>,
}

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct S1(std::string::String, std::string::String);

#[derive(serde::Serialize, serde::Deserialize, Debug, PartialEq)]
struct Serializable(S0);

impl Serializable {
    fn sample() -> Self {
        Self(S0 {
            u: (),
            t: (-8, 8, -16, 16, -32, 32, -64, 64, 32.32, 64.64),
            r: vec![51, 52, 53, 54],
            o: Some(false),
            s: S1("bananas".to_string(), "oranges".to_string()),
            l: vec!["cookies".to_string(), "muffins".to_string()],
            m: {
                let mut m = BTreeMap::new();
                m.insert(1, "hello".to_string());
                m.insert(2, "world".to_string());
                m
            },
        })
    }
}

#[test]
fn test_to_from_bytes_serializable() {
    let expected_bytes = [];
    let sample_in = Serializable::sample();
    let actual_bytes = to_bytes(&sample_in).unwrap();
    assert_eq!(actual_bytes, expected_bytes);
    let sample_out: Serializable = from_bytes(&actual_bytes).unwrap();
    assert_eq!(sample_in, sample_out);
}
